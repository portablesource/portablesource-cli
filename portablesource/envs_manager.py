#!/usr/bin/env python3
"""
Environment Manager –¥–ª—è PortableSource
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –±–∞–∑–µ Miniconda
"""

import os
import sys
import logging
import subprocess
import json
import shutil
from pathlib import Path
from typing import Optional, List, Dict, Tuple
from dataclasses import dataclass

from portablesource.get_gpu import GPUDetector, CUDAVersion, GPUType

logger = logging.getLogger(__name__)

@dataclass
class EnvironmentSpec:
    """–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    name: str
    python_version: str = "3.11"
    packages: Optional[List[str]] = None
    pip_packages: Optional[List[str]] = None
    cuda_version: Optional[str] = None
    
    def __post_init__(self):
        if self.packages is None:
            self.packages = []
        if self.pip_packages is None:
            self.pip_packages = []

class MinicondaInstaller:
    """–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Miniconda"""
    
    def __init__(self, install_path: Path):
        self.install_path = install_path
        self.miniconda_path = install_path / "miniconda"
        self.conda_exe = self.miniconda_path / "Scripts" / "conda.exe" if os.name == 'nt' else self.miniconda_path / "bin" / "conda"
        
    def is_installed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ Miniconda"""
        return self.conda_exe.exists()
    
    def get_installer_url(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Miniconda"""
        if os.name == 'nt':
            # Windows
            return "https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe"
        else:
            # Linux/macOS
            return "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
    
    def download_installer(self) -> Path:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Miniconda"""
        import urllib.request
        try:
            from tqdm import tqdm
        except ImportError:
            logger.warning("tqdm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞")
            tqdm = None
        
        url = self.get_installer_url()
        filename = Path(url).name
        installer_path = self.install_path / filename
        
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Miniconda –∏–∑ {url}")
        
        try:
            if tqdm:
                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                response = urllib.request.urlopen(url)
                total_size = int(response.headers.get('Content-Length', 0))
                
                with open(installer_path, 'wb') as f:
                    with tqdm(total=total_size, unit='B', unit_scale=True, desc="–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Miniconda") as pbar:
                        while True:
                            chunk = response.read(8192)
                            if not chunk:
                                break
                            f.write(chunk)
                            pbar.update(len(chunk))
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                urllib.request.urlretrieve(url, installer_path)
            
            logger.info(f"Miniconda —Å–∫–∞—á–∞–Ω–∞: {installer_path}")
            return installer_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Miniconda: {e}")
            raise
    
    def install(self) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Miniconda"""
        if self.is_installed():
            logger.info("Miniconda —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        
        installer_path = self.download_installer()
        
        try:
            if os.name == 'nt':
                # Windows
                cmd = [
                    str(installer_path),
                    "/InstallationType=JustMe",
                    "/S",  # –¢–∏—Ö–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
                    f"/D={self.miniconda_path}",
                ]
            else:
                # Linux/macOS
                cmd = [
                    "bash",
                    str(installer_path),
                    "-b",  # Batch mode
                    "-p", str(self.miniconda_path),
                ]
            
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Miniconda –≤ {self.miniconda_path}")
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info("Miniconda —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Miniconda: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Miniconda: {e}")
            return False
        finally:
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            try:
                if installer_path.exists():
                    os.remove(installer_path)
                    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —É–¥–∞–ª–µ–Ω: {installer_path}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ {installer_path}: {e}")

            
class EnvironmentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–∫—Ä—É–∂–µ–Ω–∏–π conda"""
    
    def __init__(self, install_path: Path):
        self.install_path = install_path
        self.miniconda_path = install_path / "miniconda"
        self.envs_path = install_path / "envs"
        self.repos_path = install_path / "repos"
        self.conda_exe = self.miniconda_path / "Scripts" / "conda.exe" if os.name == 'nt' else self.miniconda_path / "bin" / "conda"
        # Python executable from base conda environment
        if os.name == 'nt':
            self.python_exe = self.miniconda_path / "envs" / "portablesource" / "python.exe"
        else:
            self.python_exe = self.miniconda_path / "envs" / "portablesource" / "bin" / "python"
        self.installer = MinicondaInstaller(install_path)
        self.gpu_detector = GPUDetector()
        
    def ensure_miniconda(self) -> bool:
        """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ Miniconda —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"""
        if not self.installer.is_installed():
            return self.installer.install()
        return True
    
    def accept_conda_terms_of_service(self) -> bool:
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç Terms of Service –¥–ª—è conda –∫–∞–Ω–∞–ª–æ–≤"""
        channels = [
            "https://repo.anaconda.com/pkgs/main",
            "https://repo.anaconda.com/pkgs/r", 
            "https://repo.anaconda.com/pkgs/msys2"
        ]
        
        logger.info("–ü—Ä–∏–Ω—è—Ç–∏–µ Terms of Service –¥–ª—è conda –∫–∞–Ω–∞–ª–æ–≤...")
        
        for channel in channels:
            try:
                cmd = ["tos", "accept", "--override-channels", "--channel", channel]
                result = self.run_conda_command(cmd)
                
                if result.returncode == 0:
                    logger.info(f"‚úÖ Terms of Service –ø—Ä–∏–Ω—è—Ç –¥–ª—è {channel}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å ToS –¥–ª—è {channel}: {result.stderr}")
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ ToS –¥–ª—è {channel}: {e}")
        
        return True
    
    def run_conda_command(self, args: List[str], **kwargs) -> subprocess.CompletedProcess:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É conda"""
        cmd = [str(self.conda_exe)] + args
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è conda
        env = os.environ.copy()
        if os.name == 'nt':
            env['PATH'] = str(self.miniconda_path / "Scripts") + os.pathsep + env.get('PATH', '')
        else:
            env['PATH'] = str(self.miniconda_path / "bin") + os.pathsep + env.get('PATH', '')
        
        return subprocess.run(cmd, env=env, capture_output=True, text=True, **kwargs)
    
    def run_conda_command_with_progress(self, args: List[str], description: str = "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã conda", **kwargs) -> subprocess.CompletedProcess:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É conda —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –∑–∞—Ö–≤–∞—Ç–æ–º –≤—ã–≤–æ–¥–∞"""
        cmd = [str(self.conda_exe)] + args
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è conda
        env = os.environ.copy()
        if os.name == 'nt':
            env['PATH'] = str(self.miniconda_path / "Scripts") + os.pathsep + env.get('PATH', '')
        else:
            env['PATH'] = str(self.miniconda_path / "bin") + os.pathsep + env.get('PATH', '')
        
        try:
            from tqdm import tqdm
            TQDM_AVAILABLE = True
        except ImportError:
            TQDM_AVAILABLE = False
            logger.warning("tqdm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞")
        
        if TQDM_AVAILABLE:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            logger.info(f"üîÑ {description}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process = subprocess.Popen(
                cmd,
                env=env,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            with tqdm(desc=description, unit="–æ–ø–µ—Ä–∞—Ü–∏—è", dynamic_ncols=True) as pbar:
                output_lines = []
                if process.stdout:
                    for line in process.stdout:
                        output_lines.append(line)
                        pbar.update(1)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è conda
                        line_lower = line.lower().strip()
                        if any(keyword in line_lower for keyword in [
                            "downloading", "extracting", "installing", "solving", 
                            "collecting", "preparing", "executing", "verifying",
                            "error", "failed", "warning"
                        ]):
                            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            display_text = line.strip()[:60]
                            if len(line.strip()) > 60:
                                display_text += "..."
                            pbar.set_postfix_str(display_text)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            process.wait()
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CompletedProcess
            result = subprocess.CompletedProcess(
                args=cmd,
                returncode=process.returncode,
                stdout=''.join(output_lines),
                stderr=None
            )
            
            if result.returncode == 0:
                logger.info(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})")
                if result.stdout:
                    logger.error(f"–í—ã–≤–æ–¥: {result.stdout[-500:]}")
            
            return result
        else:
            # –û–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            return subprocess.run(cmd, env=env, capture_output=True, text=True, **kwargs)
    
    def list_environments(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö venv –æ–∫—Ä—É–∂–µ–Ω–∏–π"""
        if not self.envs_path.exists():
            return []
        
        envs = []
        for item in self.envs_path.iterdir():
            if item.is_dir() and (item / "pyvenv.cfg").exists():
                envs.append(item.name)
        
        return envs
    
    def environment_exists(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ venv –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        repo_env_path = self.envs_path / name
        return repo_env_path.exists() and (repo_env_path / "pyvenv.cfg").exists()
    
    def check_base_environment_integrity(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        env_name = "portablesource"
        conda_env_path = self.miniconda_path / "envs" / env_name
        
        if not conda_env_path.exists():
            logger.warning(f"Conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ {env_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        if os.name == 'nt':
            python_exe = conda_env_path / "python.exe"
            pip_exe = conda_env_path / "Scripts" / "pip.exe"
            git_exe = conda_env_path / "Library" / "bin" / "git.exe"
        else:
            python_exe = conda_env_path / "bin" / "python"
            pip_exe = conda_env_path / "bin" / "pip"
            git_exe = conda_env_path / "bin" / "git"
        
        missing_tools = []
        if not python_exe.exists():
            missing_tools.append("python")
        if not pip_exe.exists():
            missing_tools.append("pip")
        if not git_exe.exists():
            missing_tools.append("git")
        
        if missing_tools:
            logger.warning(f"–í –æ–∫—Ä—É–∂–µ–Ω–∏–∏ {env_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(missing_tools)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å Python
        try:
            result = subprocess.run([str(python_exe), "--version"], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode != 0:
                logger.warning(f"Python –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ {env_name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Python –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ {env_name}: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TensorRT –¥–ª—è NVIDIA GPU
        gpu_info = self.gpu_detector.get_gpu_info()
        nvidia_gpu = next((gpu for gpu in gpu_info if gpu.gpu_type == GPUType.NVIDIA), None)
        
        if nvidia_gpu:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ConfigManager –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TensorRT
            from .config import ConfigManager
            config_manager = ConfigManager()
            gpu_config = config_manager.configure_gpu(nvidia_gpu.name, nvidia_gpu.memory // 1024 if nvidia_gpu.memory else 0)
            
            if gpu_config.supports_tensorrt:
                tensorrt_status = self.check_tensorrt_installation()
                if not tensorrt_status:
                    logger.warning("TensorRT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞")
                    if not self.reinstall_tensorrt():
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TensorRT, –Ω–æ –±–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        logger.info(f"–ë–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ {env_name} –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
        return True
    
    def check_tensorrt_installation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å TensorRT"""
        env_name = "portablesource"
        conda_env_path = self.miniconda_path / "envs" / env_name
        
        if os.name == 'nt':
            python_exe = conda_env_path / "python.exe"
        else:
            python_exe = conda_env_path / "bin" / "python"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç TensorRT
            result = subprocess.run([
                str(python_exe), "-c", 
                "import tensorrt; print(f'TensorRT {tensorrt.__version__} —Ä–∞–±–æ—Ç–∞–µ—Ç'); assert tensorrt.Builder(tensorrt.Logger())"
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                logger.info(f"‚úÖ TensorRT –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: {result.stdout.strip()}")
                return True
            else:
                logger.warning(f"‚ùå TensorRT –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {result.stderr.strip()}")
                return False
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TensorRT: {e}")
            return False
    
    def reinstall_tensorrt(self) -> bool:
        """–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç TensorRT"""
        env_name = "portablesource"
        
        try:
            logger.info("–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ TensorRT...")
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π TensorRT
            uninstall_cmd = ["run", "-n", env_name, "pip", "uninstall", "-y", "tensorrt", "tensorrt-libs", "tensorrt-bindings"]
            uninstall_result = self.run_conda_command(uninstall_cmd)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º pip, setuptools –∏ wheel (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–∞–∫–µ—Ç—ã —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã)
            # update_cmd = ["run", "-n", env_name, "pip", "install", "--upgrade", "pip", "setuptools", "wheel"]
            # update_result = self.run_conda_command_with_progress(update_cmd, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip, setuptools –∏ wheel")
            update_result = subprocess.CompletedProcess(args=[], returncode=0, stdout="", stderr="")
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É TensorRT –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π
            # (—á–∞—Å—Ç–æ pip —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏)
            if update_result.returncode == 0:
                logger.info("‚úÖ pip, setuptools –∏ wheel –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                logger.warning("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É TensorRT")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TensorRT –∑–∞–Ω–æ–≤–æ
            tensorrt_cmd = ["run", "-n", env_name, "pip", "install", "--upgrade", "tensorrt"]
            tensorrt_result = self.run_conda_command_with_progress(tensorrt_cmd, "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ TensorRT")
            
            if tensorrt_result.returncode == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
                if self.check_tensorrt_installation():
                    logger.info("‚úÖ TensorRT —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è TensorRT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                    return False
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ TensorRT: {tensorrt_result.stderr}")
                return False
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ TensorRT: {e}")
            return False
    
    def remove_base_environment(self) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –±–∞–∑–æ–≤–æ–µ conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        env_name = "portablesource"
        conda_env_path = self.miniconda_path / "envs" / env_name
        
        if not conda_env_path.exists():
            logger.info(f"Conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ {env_name} —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return True
        
        try:
            # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ conda
            cmd = ["env", "remove", "-n", env_name, "-y"]
            result = self.run_conda_command(cmd)
            
            if result.returncode == 0:
                logger.info(f"Conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ {env_name} —É–¥–∞–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è conda –æ–∫—Ä—É–∂–µ–Ω–∏—è: {result.stderr}")
                # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –Ω–∞–ø—Ä—è–º—É—é
                shutil.rmtree(conda_env_path)
                logger.info(f"Conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ {env_name} —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è conda –æ–∫—Ä—É–∂–µ–Ω–∏—è {env_name}: {e}")
            return False
    
    def create_base_environment(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ PortableSource"""
        env_name = "portablesource"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è
        conda_env_path = self.miniconda_path / "envs" / env_name
        if conda_env_path.exists():
            if self.check_base_environment_integrity():
                logger.info(f"–ë–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ {env_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                logger.warning(f"–ë–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ {env_name} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                if not self.remove_base_environment():
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
                    return False
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º Terms of Service –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.accept_conda_terms_of_service()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        packages = [
            "python=3.11",
            "git",
            "ffmpeg",
            "pip",
            "setuptools",
            "wheel"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º CUDA –ø–∞–∫–µ—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å NVIDIA GPU
        gpu_info = self.gpu_detector.get_gpu_info()
        nvidia_gpu = next((gpu for gpu in gpu_info if gpu.gpu_type == GPUType.NVIDIA), None)
        
        if nvidia_gpu and nvidia_gpu.cuda_version:
            cuda_version = nvidia_gpu.cuda_version.value
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CUDA {cuda_version} toolkit + cuDNN")
            
            if cuda_version == "11.8":
                packages.extend([
                    "cuda-toolkit=11.8",
                    "cudnn"
                ])
            elif cuda_version == "12.4":
                packages.extend([
                    "cuda-toolkit=12.4",
                    "cudnn"
                ])
            elif cuda_version == "12.8":
                packages.extend([
                    "cuda-toolkit=12.8",
                    "cudnn"
                ])
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        cmd = ["create", "-n", env_name, "-y"] + packages
        result = self.run_conda_command_with_progress(cmd, f"–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è {env_name} —Å {len(packages)} –ø–∞–∫–µ—Ç–∞–º–∏")
        
        if result.returncode == 0:
            logger.info(f"–ë–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ {env_name} —Å–æ–∑–¥–∞–Ω–æ")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è NVIDIA GPU
            if nvidia_gpu:
                logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è NVIDIA GPU...")
                try:
                    # Skip pip upgrade to avoid permission issues
                    # update_cmd = ["run", "-n", env_name, "pip", "install", "--upgrade", "pip", "setuptools", "wheel"]
                    # update_result = self.run_conda_command_with_progress(update_cmd, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip, setuptools –∏ wheel")
                    update_result = subprocess.CompletedProcess(args=[], returncode=0, stdout="", stderr="")  # Mock successful result
                    
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É TensorRT –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π
                    if update_result.returncode == 0:
                        logger.info("‚úÖ pip, setuptools –∏ wheel –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                    else:
                        logger.warning("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É TensorRT")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TensorRT —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ TensorRT (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)...")
                    tensorrt_cmd = ["run", "-n", env_name, "pip", "install", "--upgrade", "tensorrt"]
                    tensorrt_result = self.run_conda_command_with_progress(tensorrt_cmd, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ TensorRT")
                    
                    if tensorrt_result.returncode == 0:
                        logger.info("‚úÖ TensorRT —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        logger.info("üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python -c 'import tensorrt; print(tensorrt.__version__)'")
                    else:
                        logger.warning("‚ö†Ô∏è TensorRT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è Python –∏–ª–∏ CUDA)")
                        logger.info("üí° TensorRT –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö NVIDIA –ø–∞–∫–µ—Ç–æ–≤: {e}")
                    logger.info("üí° –ë–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ")
            
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {result.stderr}")
            return False
    
    def create_repository_environment(self, repo_name: str, spec: EnvironmentSpec) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç venv –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        repo_env_path = self.envs_path / repo_name
        
        if repo_env_path.exists():
            logger.info(f"Venv –æ–∫—Ä—É–∂–µ–Ω–∏–µ {repo_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è venv –æ–∫—Ä—É–∂–µ–Ω–∏–π
        self.envs_path.mkdir(parents=True, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤–æ–≥–æ conda –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not (self.miniconda_path / "envs" / "portablesource").exists():
            logger.error("–ë–∞–∑–æ–≤–æ–µ conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ portablesource –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º venv –∏—Å–ø–æ–ª—å–∑—É—è Python –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ conda –æ–∫—Ä—É–∂–µ–Ω–∏—è
        try:
            cmd = [str(self.python_exe), "-m", "venv", str(repo_env_path)]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è venv: {result.stderr}")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ pip –≤ venv
            if os.name == 'nt':
                venv_pip = repo_env_path / "Scripts" / "pip.exe"
                venv_python = repo_env_path / "Scripts" / "python.exe"
            else:
                venv_pip = repo_env_path / "bin" / "pip"
                venv_python = repo_env_path / "bin" / "python"
            
            # Skip pip upgrade to avoid permission issues
            # subprocess.run([str(venv_python), "-m", "pip", "install", "--upgrade", "pip"], 
            #              capture_output=True, text=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
            if spec.pip_packages:
                for package in spec.pip_packages:
                    result = subprocess.run([str(venv_pip), "install", package], 
                                          capture_output=True, text=True)
                    if result.returncode != 0:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}: {result.stderr}")
            
            logger.info(f"Venv –æ–∫—Ä—É–∂–µ–Ω–∏–µ {repo_name} —Å–æ–∑–¥–∞–Ω–æ –≤ {repo_env_path}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è venv –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False
    
    def remove_environment(self, name: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç venv –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        if not self.environment_exists(name):
            logger.warning(f"Venv –æ–∫—Ä—É–∂–µ–Ω–∏–µ {name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        
        repo_env_path = self.envs_path / name
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É venv
            shutil.rmtree(repo_env_path)
            logger.info(f"Venv –æ–∫—Ä—É–∂–µ–Ω–∏–µ {name} —É–¥–∞–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è venv –æ–∫—Ä—É–∂–µ–Ω–∏—è {name}: {e}")
            return False
    
    def get_environment_python_path(self, env_name: str) -> Optional[Path]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ Python –≤ venv –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        repo_env_path = self.envs_path / env_name
        
        if os.name == 'nt':
            python_path = repo_env_path / "Scripts" / "python.exe"
        else:
            python_path = repo_env_path / "bin" / "python"
        
        return python_path if python_path.exists() else None
    
    def activate_environment_script(self, env_name: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ conda –±–∞–∑–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è + venv —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        repo_env_path = self.envs_path / env_name
        
        if os.name == 'nt':
            # Windows batch
            conda_bat = self.miniconda_path / "Scripts" / "activate.bat"
            venv_activate = repo_env_path / "Scripts" / "activate.bat"
            return f'call "{conda_bat}" && conda activate portablesource && call "{venv_activate}"'
        else:
            # Linux bash
            conda_sh = self.miniconda_path / "etc" / "profile.d" / "conda.sh"
            venv_activate = repo_env_path / "bin" / "activate"
            return f'source "{conda_sh}" && conda activate portablesource && source "{venv_activate}"'